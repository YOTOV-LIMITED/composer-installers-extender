{
  "name": "Composer-installers-extender",
  "tagline": "Extend the composer/installers plugin to accept any arbitrary package type.",
  "body": "# Composer Installers Extender\r\n\r\nThe `composer-installers-extender` is a plugin for [Composer](https://getcomposer.org/) that allows\r\nany package to be installed to a directory other than the default `vendor/` directory within\r\nthe repo on a package-by-package basis. This plugin extends the [`composer/installers`](https://github.com/composer/installers)\r\nplugin to allow any arbitrary package type to be handled by their custom installer and specified explicitly in the\r\n`\"installer-paths\"` mapping in the `\"extra\"` data property.\r\n\r\n`composer/installers` has a finite set of supported package types and we recognize the need for\r\nany arbitrary package type to be installed to a specific directory other than `vendor/`. This plugin\r\nallows additional package types to be handled by `composer/installers`, benefiting from their explicit install path\r\nmapping and token replacement of package properties.\r\n\r\n## How to Use\r\nAdd `oomphinc/composer-installers-extender` as a dependency of your project.\r\n```sh\r\ncomposer require oomphinc/composer-installers-extender\r\n```\r\n`composer/installers` is a dependency of this plugin and will be automatically required as well.\r\n\r\nTo support additional package types, add an array of these types in the `\"extra\"` property in your `composer.json`:\r\n```\r\n\t\"extra\": {\r\n\t\t\"installer-types\": [\"library\"]\r\n\t}\r\n```\r\nThen, you can add mappings for packages of these types in the same way that you would add package types\r\nthat are supported by [`composer/installers`](https://github.com/composer/installers#custom-install-paths):\r\n```\r\n  \"extra\": {\r\n    \"installer-types\": [\"library\"],\r\n    \"installer-paths\": {\r\n      \"special/package/\": [\"my/package\"],\r\n      \"path/to/libraries/{$name}/\": [\"type:library\"]\r\n    }\r\n  }\r\n```\r\nBy default, packages that do not specify a `type` will be considered type `library`. Adding support for this type\r\nallows any of these packages to be placed in a different install path.\r\n\r\nIf a type has been added to `\"installer-types\"`, the plugin will attempt to find an explicit installer path in the mapping.\r\nIf there is no match either by name or by type, the default installer path for all packages will be used instead.\r\n\r\nPlease see the README for [`composer/installers`](https://github.com/composer/installers) to see the supported\r\nsyntax for package and type matching as well as the supported replacement tokens in the path (e.g. `{$name}`).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}